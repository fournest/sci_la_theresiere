{% extends 'base.html.twig' %}

{% block title %}Votre réservation
{% endblock %}

{% block body %}
	<h1>Modifiez votre réservation</h1>
	{% if reservation.statut != 'annulée' and reservation.statut !='validée' %}
		{{ include('reservation/_form.html.twig', {'button_label': 'Modifier'}) }}
	{% endif %}
	{% if reservation.statut != 'annulée' and reservation.statut !='validée' and is_granted('ROLE_USER') and app.user == reservation.user %}
		<form method="post" action="{{ path('app_reservation_cancel', {'id': reservation.id}) }}" onsubmit="return confirm('Êtes-vous sûr de vouloir annuler cette réservation ?');">
			<input type="hidden" name="_token" value="{{ csrf_token('cancel' ~ reservation.id) }}">
			<button class="btn-principal">Annuler ma réservation</button>
		</form>
	{% endif %}
	<a class="btn-principal" href="{{ path('app_reservation_index') }}">Retour à la liste</a>
	{% if reservation.statut != 'annulée'%}
		{% if is_granted('ROLE_ADMIN') %}
			{{ include('reservation/_delete_form.html.twig') }}
		{% endif %}
	{% endif %}

	
    
    {% if reservation.statut != 'annulée' and reservation.statut != 'validée' %}
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                
                // 1. Préparation des dates indisponibles au format objet (from/to)
                const indisponibleRanges = [
                    {% for indisponibilite in datesIndisponibles|default([]) %}
                        {
                            from: "{{ indisponibilite[0] }}",
                            to: "{{ indisponibilite[1] }}"
                        },
                    {% endfor %}
                ];
                
                // 2. Identification de la période actuelle de la réservation
                const currentResaStart = "{{ reservation.dateResaDebut|date('Y-m-d') }}";
                const currentResaEnd = "{{ reservation.dateResaFin|date('Y-m-d') }}";

                // 3. Exclusion de la période actuelle de la liste des dates bloquées
                const finalDisableDates = indisponibleRanges.filter(item => {
                    // Si le début ET la fin de la plage bloquée correspondent à la réservation actuelle, on la filtre (exclut)
                    return !(item.from === currentResaStart && item.to === currentResaEnd);
                });

                // 4. Récupération des inputs par ID 
                var dateDebutInput = document.getElementById('reservation_dateResaDebut');
                var dateFinInput = document.getElementById('reservation_dateResaFin');
                
                // 5. Initialisation de la date de fin (pour pouvoir la référencer dans fpDebut)
                var fpFin = flatpickr(dateFinInput, {
                    dateFormat: "Y-m-d",
                    locale: "fr",
                    minDate: dateDebutInput.value || "today", // Commence à la date actuelle ou aujourd'hui
                    disable: finalDisableDates
                });

                // 6. Initialisation de la date de début
                var fpDebut = flatpickr(dateDebutInput, {
                    dateFormat: "Y-m-d",
                    locale: "fr",
                    minDate: "today",
                    
                    // Liaison : Si la date de début change, la date min de fin est ajustée
                    onChange: function(selectedDates, dateStr, instance) {
                        fpFin.set('minDate', dateStr);
                    },
                    
                    disable: finalDisableDates
                });
            });
        </script>
    {% endif %}
{% endblock %}
